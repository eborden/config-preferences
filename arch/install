#!/bin/sh
set -e

# arch install script
# docs: https://wiki.archlinux.org/index.php/Installation_guide
# scripting inspired by:
#   https://github.com/pbrisbin/arch-setup/blob/master/install

# Defaults
: "${INSTALL_DISK:=/dev/nvme0n1}"
: "${INSTALL_SWAP_SIZE:=34G}"
: "${INSTALL_USER:=evan}"
: "${INSTALL_HOSTNAME:=hal}"

INSTALL_DISK_1="${INSTALL_DISK}p1"
INSTALL_DISK_2="${INSTALL_DISK}p2"
INSTALL_DISK_3="${INSTALL_DISK}p3"

# Infer for networking
INSTALL_EN=$(ip link | sed '/^[0-9]*: \(en[^:]*\):.*$/!d; s//\1/' | head -n 1)
INSTALL_EN=${INSTALL_EN:-en0} # let it proceed with dummy value

INSTALL_WLAN=$(ip link | sed '/^[0-9]*: \(wl[^:]*\):.*$/!d; s//\1/' | head -n 1)
INSTALL_WLAN=${INSTALL_WLAN:-wlan0} # let it proceed with dummy value

curl_file() {
  url=https://raw.githubusercontent.com/eborden/dotfiles/master/files/arch/$1
  curl --location --silent --fail "$url"
}

case "${1:-system}" in
  system)
    # Setup Wifi
    # ip link
    # ip link set "$INSTALL_WLAN" up

    # wlan_conf='/etc/wpa_supplicant/default.conf'
    # wpa_passphrase 'nacho 5g wifi' "$WLAN_PASS" > "$wlan_conf"
    # wpa_supplicant -B -c "$wlan_conf" -i "$INSTALL_WLAN"
    # dhclient "$INSTALL_WLAN"

    # Setup time
    timedatectl set-ntp true
    timedatectl status

    # parition
    # Device         Size   Type
    # /dev/nvme0n1p1 512M   EFI System
    # /dev/nvme0n1p2 442.4G Linux root (x86-64)
    # /dev/nvme0n1p3 34G    Linux swap
    fdisk "$INSTALL_DISK" <<EOF
g
n
1

+512M
t
1
n
3

+${INSTALL_SWAP_SIZE}
t
3
19
n
2


t
2
24
p
w
EOF

    # format partitions
    cryptsetup -y -v luksFormat "${INSTALL_DISK_2}"
    cryptsetup open "${INSTALL_DISK_2}" cryptroot
    mkfs.ext4 /dev/mapper/cryptroot
    mkfs.fat -F32 "${INSTALL_DISK_1}"

    # Swap
    mkswap "${INSTALL_DISK_3}"
    swapon "${INSTALL_DISK_3}"

    # mount
    mount /dev/mapper/cryptroot /mnt
    mkdir /mnt/boot
    mount "${INSTALL_DISK_1}" /mnt/boot

    # install
    pacstrap /mnt base

    # fstab
    genfstab -U /mnt >> /mnt/etc/fstab

    # Chroot
    cp install /mnt/
    arch-chroot /mnt ./install system-chroot
    reboot
    ;;
  system-chroot)
    # Timezone
    ln -sf /usr/share/zoneinfo/US/Central /etc/localtime
    hwclock --systohc
    timedatectl set-ntp true

    # Locale
    sed -i 's/^#\(en_US.UTF-8\)/\1/' /etc/locale.gen
    locale-gen
    echo 'LANG=en_US.UTF-8' > /etc/locale.conf

    # Keymap
    cat <<EOM >/etc/vconsole.conf
keycode 1 = Caps_Lock
keycode 58 = Escape
EOM
    loadkeys /etc/vconsole.conf

    # Network config
    echo "$INSTALL_HOSTNAME" >/etc/hostname
    cat <<EOM >/etc/hosts
# Static table lookup for hostnames.
# See hosts(5) for details.
127.0.0.1 localhost.localdomain localhost
::1       localhost.localdomain localhost
$INSTALL_HOSTNAME $INSTALL_HOSTNAME.localdomain localhost
EOM

    # initramfs
    sed -i 's/ filesystems / encrypt filesystems /' /etc/mkinitcpio.conf
    mkinitcpio -p linux

    # set password
    echo "For root:"
    while ! passwd; do echo "Try again"; done

    # Intel microcode
    pacman -S --needed --noconfirm intel-ucode

    # boot
    bootctl --path=/boot install
    bootctl --path=/boot update
    cat >/boot/loader/loader.conf <<EOM
default arch
timeout 3
editor 0
EOM

    uuid=$(blkid "${INSTALL_DISK}p2" -s UUID | cut -d\" -f 2)

    cat >/boot/loader/entries/arch.conf <<EOM
title Arch Linux
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options cryptdevice=UUID=$uuid:cryptroot root=/dev/mapper/cryptroot rw
EOM

    # Networking
    pacman -S --needed --noconfirm wpa_supplicant dialog ifplugd
    systemctl enable "netctl-auto@$INSTALL_WLAN"
    systemctl enable "netctl-ifplugd@$INSTALL_EN"
    cat >"/etc/netctl/${INSTALL_EN}-ethernet" <<EOM
Description='DHCP ethernet connection'
Interface=$INSTALL_EN
Connection=ethernet
IP=dhcp
EOM

    # Minimal install
    pacman -S --needed --noconfirm \
      base-devel \
      grml-zsh-config \
      neovim \
      sudo \
      zsh

    # Install user
    echo '%wheel ALL=(ALL) NOPASSWD:ALL' >/etc/sudoers.d/100-wheel

    ln -s /usr/bin/nvim /usr/bin/vim
    chsh -s /bin/zsh
    useradd -m -G wheel -s /bin/zsh "$INSTALL_USER"

    echo "For $INSTALL_USER:"
    while ! passwd "$INSTALL_USER"; do echo "Try again"; done
    ;;

  user)
    # Bootstrap Aurget
    curl -# https://aur.archlinux.org/cgit/aur.git/snapshot/aurget.tar.gz |
      tar fxz -
    (cd ./aurget && makepkg -i -r -s --noconfirm) && rm -rf ./aurget

    # X
    sudo pacman -S --needed --noconfirm \
      xorg \
      xorg-xinit \
      xf86-video-intel \
      xf86-input-synaptics \
      xterm \
      ttf-dejavu \
      firefox \
      dmenu

    # ACPID
    sudo pacman -S --needed --noconfirm acpid acpi hdparm sdparm wireless_tools
    sudo systemctl enable acpid
    sudo systemctl start acpid
    aurget -S --deps --noedit --noconfirm --skippgpcheck laptop-mode-tools
    sudo systemctl enable laptop-mode
    sudo systemctl start laptop-mode

    curl_file acpi-handler.sh | sudo tee /etc/acpi/handler.sh

    # Docker
    sudo pacman -S --needed --noconfirm docker docker-compose docker-machine
    sudo systemctl enable docker
    sudo systemctl start docker
    sudo gpasswd -a "$USER" docker

    # Other packages
    sudo pacman -S --needed --noconfirm \
      alsa-utils \
      aws-cli \
      bind-tools \
      dunst \
      fzf \
      git \
      gnupg \
      hdparm \
      htop \
      jq \
      jre-openjdk-headless \
      lsof \
      openssh \
      pass \
      postgresql-libs \
      rcm \
      ruby \
      rxvt-unicode \
      scrot \
      shfmt \
      slock \
      strace \
      tig \
      truecrypt \
      urxvt-perls \
      wget \
      xautolock \
      xclip \
      xdotool \
      zsh

    aurget -S --deps --noedit --noconfirm --skippgpcheck \
      browserpass \
      zoom

    # Dotfiles
    echo "For $USER@$(hostname) SSH key:"
    ssh-keygen -t rsa -b 4096
    xclip -selection clipboard <~/.ssh/id_rsa.pub
    firefox github.com

    git clone git@github.com:eborden/dotfiles ~/.dotfiles

    # Monitor hotplugging
    sudo tee /etc/udev/rules.d/99-monitor-hotplug.rules <<EOM
KERNEL=="card0", SUBSYSTEM=="drm", ACTION=="change", \
  RUN+="/home/$INSTALL_USER/.local/bin/runx /home/$INSTALL_USER/.local/bin/msu"
EOM

    # Stack
    aurget -S --deps --noedit --noconfirm --skippgpcheck stack-static
    stack setup

    # Avoid prompting
    rcup -f

    echo
    echo "Done. Most things won't work until you log out/in again."
    ;;

  *)
    echo "Invalid stage: $1" >&2
    echo "  must be system|system-chroot|user" >&2
    exit 1
    ;;
esac
